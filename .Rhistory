if (length(x) != length(y)) stop("x and y are not at the same length")
reMatrx <- NULL
if (var == "tm") VarN <- c("TEMP1d", "mean_temperature")
if (var == "rr") VarN <- c("PREC1d", "precipitation_amount")
s <- as.Date(s)
e <- as.Date(e)
np <- length(x)
nc <- nc_open(sprintf("%s/%s/%s/%s_%s.nc", path, var, year(s), var, format(s, "%Y_%m_%d")),readunlim=F)
X <- ncvar_get(nc, "X")
Y <- ncvar_get(nc, "Y")
nc_close(nc)
xx <- matrix(rep(X, length(Y)), nrow = length(Y))
yy <- matrix(rep(Y, length(X)), ncol = length(X))
nx <- vector(length = np)
ny <- vector(length = np)
for (ip in seq(np)) {
dis <- (xx-x[ip])^2 + (yy-y[ip])^2
nearest <- which.min(dis)
nx[ip] <- which(X == xx[nearest])
ny[ip] <- which(Y == yy[nearest])
}
minX <- min(nx)
minY <- min(ny)
maxX <- max(nx)
maxY <- max(ny)
nx <- nx - minX + 1
ny <- ny - minY + 1
for (iY in seq(s, e, by = "day")) {
nc <- nc_open(sprintf("%s/%s/%s/%s_%s.nc", path, var, year(iY), var, format(iY, "%Y_%m_%d")),readunlim=F)
ndays <- length(ncvar_get(nc, "time"))
seNorgeData <- ncvar_get(nc, VarN[2], start=c(minX,minY,1), count=c(maxX-minX+1,maxY-minY+1,ndays))
#get <- seNorgeData[nx, ny, ]
get <- seNorgeData
reMatrx <- c(reMatrx, get)
}
return(reMatrx)
}
testd <- seNorgeDailyTimeSeriesDay(SeNorgeInne[icell, 7], SeNorgeInne[icell, 8], "1957-01-01", "1957-01-01",
var = "tm", path = "//hdata/grid/metdata/met_obs_v2.0")
#' get SeNorge time series for a point (x, y)
#'
#' @param x x direction coordinate lon, utm_e
#' @param y y direction coordinate lat, utm_n
#' @param s start date
#' @param e end date
#' @param var variable to extract: tm or rr
#' @param path path to data
#'
#' @keywords data
#' @export
#' @examples
#' seNorgeDailyTimeSeriesDay()
seNorgeDailyTimeSeriesDay <- function(x, y, s = s, e = e, var = "tm", path = "//hdata/grid/metdata/met_obs_v2.0") {
if (! require("ncdf4")) {install.packages("ncdf4"); library(ncdf4)}
if (! require("lubridate")) {install.packages("lubridate"); library(lubridate)}
if (length(x) != length(y)) stop("x and y are not at the same length")
reMatrx <- NULL
if (var == "tm") VarN <- c("TEMP1d", "mean_temperature")
if (var == "rr") VarN <- c("PREC1d", "precipitation_amount")
s <- as.Date(s)
e <- as.Date(e)
np <- length(x)
nc <- nc_open(sprintf("%s/%s/%s/%s_%s.nc", path, var, format(s, "%Y"), var, format(s, "%Y_%m_%d")),readunlim=F)
X <- ncvar_get(nc, "X")
Y <- ncvar_get(nc, "Y")
nc_close(nc)
xx <- matrix(rep(X, length(Y)), nrow = length(Y))
yy <- matrix(rep(Y, length(X)), ncol = length(X))
nx <- vector(length = np)
ny <- vector(length = np)
for (ip in seq(np)) {
dis <- (xx-x[ip])^2 + (yy-y[ip])^2
nearest <- which.min(dis)
nx[ip] <- which(X == xx[nearest])
ny[ip] <- which(Y == yy[nearest])
}
minX <- min(nx)
minY <- min(ny)
maxX <- max(nx)
maxY <- max(ny)
nx <- nx - minX + 1
ny <- ny - minY + 1
for (iY in seq(s, e, by = "day")) {
nc <- nc_open(sprintf("%s/%s/%s/%s_%s.nc", path, var, format(s, "%Y"), var, format(iY, "%Y_%m_%d")),readunlim=F)
ndays <- length(ncvar_get(nc, "time"))
seNorgeData <- ncvar_get(nc, VarN[2], start=c(minX,minY,1), count=c(maxX-minX+1,maxY-minY+1,ndays))
#get <- seNorgeData[nx, ny, ]
get <- seNorgeData
reMatrx <- c(reMatrx, get)
}
return(reMatrx)
}
testd <- seNorgeDailyTimeSeriesDay(SeNorgeInne[icell, 7], SeNorgeInne[icell, 8], "1957-01-01", "1957-01-01",
var = "tm", path = "//hdata/grid/metdata/met_obs_v2.0")
format(s, "%Y")
library(lubridate)
s
e
x
x <- SeNorgeInne[icell, 7]
y <- SeNorgeInne[icell, 8]
x
y
var
if (! require("ncdf4")) {install.packages("ncdf4"); library(ncdf4)}
if (! require("lubridate")) {install.packages("lubridate"); library(lubridate)}
if (length(x) != length(y)) stop("x and y are not at the same length")
reMatrx <- NULL
if (var == "tm") VarN <- c("TEMP1d", "mean_temperature")
if (var == "rr") VarN <- c("PREC1d", "precipitation_amount")
s <- as.Date(s)
e <- as.Date(e)
np <- length(x)
nc <- nc_open(sprintf("%s/%s/%s/%s_%s.nc", path, var, format(s, "%Y"), var, format(s, "%Y_%m_%d")),readunlim=F)
X <- ncvar_get(nc, "X")
Y <- ncvar_get(nc, "Y")
nc_close(nc)
xx <- matrix(rep(X, length(Y)), nrow = length(Y))
yy <- matrix(rep(Y, length(X)), ncol = length(X))
nx <- vector(length = np)
ny <- vector(length = np)
for (ip in seq(np)) {
dis <- (xx-x[ip])^2 + (yy-y[ip])^2
nearest <- which.min(dis)
nx[ip] <- which(X == xx[nearest])
ny[ip] <- which(Y == yy[nearest])
}
minX <- min(nx)
minY <- min(ny)
maxX <- max(nx)
maxY <- max(ny)
nx <- nx - minX + 1
ny <- ny - minY + 1
for (iY in seq(s, e, by = "day")) {
nc <- nc_open(sprintf("%s/%s/%s/%s_%s.nc", path, var, format(s, "%Y"), var, format(iY, "%Y_%m_%d")),readunlim=F)
ndays <- length(ncvar_get(nc, "time"))
seNorgeData <- ncvar_get(nc, VarN[2], start=c(minX,minY,1), count=c(maxX-minX+1,maxY-minY+1,ndays))
#get <- seNorgeData[nx, ny, ]
get <- seNorgeData
reMatrx <- c(reMatrx, get)
}
sprintf("%s/%s/%s/%s_%s.nc", path, var, format(s, "%Y"), var, format(iY, "%Y_%m_%d"))
format(s, "%Y")
format(iY, "%Y_%m_%d")
iY
s
e
iY
sprintf("%s/%s/%s/%s_%s.nc", path, var, format(s, "%Y"), var, format(as.Date(iY, origin='1900-01-01'), "%Y_%m_%d"))
sprintf("%s/%s/%s/%s_%s.nc", path, var, format(s, "%Y"), var, format(as.Date(iY, origin='1970-01-01'), "%Y_%m_%d"))
#' get SeNorge time series for a point (x, y)
#'
#' @param x x direction coordinate lon, utm_e
#' @param y y direction coordinate lat, utm_n
#' @param s start year
#' @param e end year
#' @param var variable to extract: tm or rr
#' @param path path to data
#'
#' @keywords data
#' @export
#' @examples
#' seNorgeDailyTimeSeriesYear()
seNorgeDailyTimeSeriesYear <- function(x, y, s = s, e = e, var = "tm", path = "//hdata/grid/metdata/met_obs_v2.1") {
if (! require("ncdf4")) {install.packages("ncdf4"); library(ncdf4)}
if (! require("lubridate")) {install.packages("lubridate"); library(lubridate)}
if (length(x) != length(y)) stop("x and y are not at the same length")
reMatrx <- NULL
if (var == "tm") VarN <- c("TEMP1d", "mean_temperature")
if (var == "rr") VarN <- c("PREC1d", "precipitation_amount")
np <- length(x)
nc <- nc_open(sprintf("%s/%s/archive/seNorge_v2_1_%s_grid_%04d.nc", path, var, VarN[1], as.numeric(s)),readunlim=F)
X <- ncvar_get(nc, "X")
Y <- ncvar_get(nc, "Y")
nc_close(nc)
xx <- matrix(rep(X, length(Y)), nrow = length(Y))
yy <- matrix(rep(Y, length(X)), ncol = length(X))
nx <- vector(length = np)
ny <- vector(length = np)
for (ip in seq(np)) {
dis <- (xx-x[ip])^2 + (yy-y[ip])^2
nearest <- which.min(dis)
nx[ip] <- which(X == xx[nearest])
ny[ip] <- which(Y == yy[nearest])
}
minX <- min(nx)
minY <- min(ny)
maxX <- max(nx)
maxY <- max(ny)
nx <- nx - minX + 1
ny <- ny - minY + 1
for (iY in seq(s, e, 1)) {
print(sprintf("%s/%s/archive/seNorge_v2_1_%s_grid_%04d.nc", path, var, VarN[1], iY))
nc <- nc_open(sprintf("%s/%s/archive/seNorge_v2_1_%s_grid_%04d.nc", path, var, VarN[1], iY),readunlim=F)
ndays <- length(ncvar_get(nc, "time"))
seNorgeData <- ncvar_get(nc, VarN[2], start=c(minX,minY,1), count=c(maxX-minX+1,maxY-minY+1,ndays))
#get <- seNorgeData[nx, ny, ]
get <- seNorgeData
reMatrx <- c(reMatrx, get)
}
return(reMatrx)
}
#' get SeNorge time series for a point (x, y)
#'
#' @param x x direction coordinate lon, utm_e
#' @param y y direction coordinate lat, utm_n
#' @param s start date
#' @param e end date
#' @param var variable to extract: tm or rr
#' @param path path to data
#'
#' @keywords data
#' @export
#' @examples
#' seNorgeDailyTimeSeriesDay()
seNorgeDailyTimeSeriesDay <- function(x, y, s = s, e = e, var = "tm", path = "//hdata/grid/metdata/met_obs_v2.0") {
if (! require("ncdf4")) {install.packages("ncdf4"); library(ncdf4)}
if (! require("lubridate")) {install.packages("lubridate"); library(lubridate)}
if (length(x) != length(y)) stop("x and y are not at the same length")
reMatrx <- NULL
if (var == "tm") VarN <- c("TEMP1d", "mean_temperature")
if (var == "rr") VarN <- c("PREC1d", "precipitation_amount")
s <- as.Date(s)
e <- as.Date(e)
np <- length(x)
nc <- nc_open(sprintf("%s/%s/%s/%s_%s.nc", path, var, format(s, "%Y"), var, format(s, "%Y_%m_%d")),readunlim=F)
X <- ncvar_get(nc, "X")
Y <- ncvar_get(nc, "Y")
nc_close(nc)
xx <- matrix(rep(X, length(Y)), nrow = length(Y))
yy <- matrix(rep(Y, length(X)), ncol = length(X))
nx <- vector(length = np)
ny <- vector(length = np)
for (ip in seq(np)) {
dis <- (xx-x[ip])^2 + (yy-y[ip])^2
nearest <- which.min(dis)
nx[ip] <- which(X == xx[nearest])
ny[ip] <- which(Y == yy[nearest])
}
minX <- min(nx)
minY <- min(ny)
maxX <- max(nx)
maxY <- max(ny)
nx <- nx - minX + 1
ny <- ny - minY + 1
for (iY in seq(s, e, by = "day")) {
nc <- nc_open(sprintf("%s/%s/%s/%s_%s.nc", path, var, format(s, "%Y"), var, format(as.Date(iY, origin='1970-01-01'), "%Y_%m_%d")),readunlim=F)
ndays <- length(ncvar_get(nc, "time"))
seNorgeData <- ncvar_get(nc, VarN[2], start=c(minX,minY,1), count=c(maxX-minX+1,maxY-minY+1,ndays))
#get <- seNorgeData[nx, ny, ]
get <- seNorgeData
reMatrx <- c(reMatrx, get)
}
return(reMatrx)
}
testd <- seNorgeDailyTimeSeriesDay(SeNorgeInne[icell, 7], SeNorgeInne[icell, 8], "1957-01-01", "1957-01-01",
var = "tm", path = "//hdata/grid/metdata/met_obs_v2.0")
testd
SeNorgeInne[icell,]
nc <- nc_open(sprintf("%s/%s/%s/%s_%s.nc", path, var, format(s, "%Y"), var, format(as.Date(iY, origin='1970-01-01'), "%Y_%m_%d")),readunlim=F)
seNorgeData <- ncvar_get(nc, VarN[2])
which(seNorgeData == -10.4)
nc
path <- "//hdata/grid/metdata/met_obs_v2.1"
var <- "tm"
if (var == "tm") VarN <- c("TEMP1d", "mean_temperature")
if (var == "rr") VarN <- c("PREC1d", "precipitation_amount")
iY <- as.numeric(as.Date("1957-01-01"))
nc <- nc_open(sprintf("%s/%s/%s/%s_%s.nc", path, var, format(s, "%Y"), var, format(as.Date(iY, origin='1970-01-01'), "%Y_%m_%d")),readunlim=F)
ndays <- length(ncvar_get(nc, "time"))
seNorgeData <- ncvar_get(nc, VarN[2])
path <- "//hdata/grid/metdata/met_obs_v2.0"
var <- "tm"
if (var == "tm") VarN <- c("TEMP1d", "mean_temperature")
if (var == "rr") VarN <- c("PREC1d", "precipitation_amount")
iY <- as.numeric(as.Date("1957-01-01"))
nc <- nc_open(sprintf("%s/%s/%s/%s_%s.nc", path, var, format(s, "%Y"), var, format(as.Date(iY, origin='1970-01-01'), "%Y_%m_%d")),readunlim=F)
ndays <- length(ncvar_get(nc, "time"))
seNorgeData <- ncvar_get(nc, VarN[2])
iY <- as.numeric(as.Date("1957-01-01"))
nc <- nc_open(sprintf("%s/%s/%s/%s_%s.nc", path, var, format(as.Date(iY, origin='1970-01-01'), "%Y"), var, format(as.Date(iY, origin='1970-01-01'), "%Y_%m_%d")),readunlim=F)
ndays <- length(ncvar_get(nc, "time"))
seNorgeData <- ncvar_get(nc, VarN[2])
which(seNorgeData == testd)
X <- ncvar_get(nc, "X")
Y <- ncvar_get(nc, "Y")
ij <- nearestXY(x, y, X, Y)
x <- SeNorgeInne[icell, 7]
y <- SeNorgeInne[icell, 8]
ij <- nearestXY(x, y, X, Y)
ij
x y
x
y
which(X == x)
which(Y == y)
SeNorgeInne[icell,]
length(x)
length(X)
length(Y)
x
X
Y
SeNorgeInne[icell,]
SeNorgeInne[icell,2] %% 1195
SeNorgeInne[icell,2] %% 1550
SeNorgeInne[icell,2] - 1195*157
length(X)
length(Y)
ij
which(X == x)
which(Y == y)
(SeNorgeInne[icell,2] - 157)/1195
testd
nc
testd
seNorgeData[158, 1254]
seNorgeData[1254, 158]
seNorgeData[158, 1254]
sprintf("%s/%s/%s/%s_%s.nc", path, var, format(as.Date(iY, origin='1970-01-01'), "%Y"), var, format(as.Date(iY, origin='1970-01-01'), "%Y_%m_%d")
)
path <- "//hdata/grid/metdata/met_obs_v2.0"
var <- "tm"
if (var == "tm") VarN <- c("TEMP1d", "mean_temperature")
if (var == "rr") VarN <- c("PREC1d", "precipitation_amount")
iY <- as.numeric(as.Date("1957-01-01"))
nc <- nc_open(sprintf("%s/%s/%s/%s_%s.nc", path, var, format(as.Date(iY, origin='1970-01-01'), "%Y"), var, format(as.Date(iY, origin='1970-01-01'), "%Y_%m_%d")),readunlim=F)
ndays <- length(ncvar_get(nc, "time"))
seNorgeData <- ncvar_get(nc, VarN[2])
dim(seNorgeData)
seNorgeData[T158, 1254]
seNorgeData[158, 1254]
X[158]
Y[1254]
x
y
testd <- seNorgeDailyTimeSeriesDay(x, y, "1957-01-01", "1957-01-01",
var = "tm", path = "//hdata/grid/metdata/met_obs_v2.0")
testd
s
e
s <- "1957-01-01"
e <- s
np <- length(x)
nc <- nc_open(sprintf("%s/%s/%s/%s_%s.nc", path, var, format(s, "%Y"), var, format(s, "%Y_%m_%d")),readunlim=F)
X <- ncvar_get(nc, "X")
Y <- ncvar_get(nc, "Y")
nc_close(nc)
xx <- matrix(rep(X, length(Y)), nrow = length(Y))
yy <- matrix(rep(Y, length(X)), ncol = length(X))
nx <- vector(length = np)
ny <- vector(length = np)
for (ip in seq(np)) {
dis <- (xx-x[ip])^2 + (yy-y[ip])^2
nearest <- which.min(dis)
nx[ip] <- which(X == xx[nearest])
ny[ip] <- which(Y == yy[nearest])
}
sprintf("%s/%s/%s/%s_%s.nc", path, var, format(s, "%Y"), var, format(s, "%Y_%m_%d"))
s
sprintf("%s/%s/%s/%s_%s.nc", path, var, format(as.Date(s), "%Y"), var, format(as.Date(s), "%Y_%m_%d"))
sprintf("%s/%s/%s/%s_%s.nc", path, var, format(as.Date(s), "%Y"), var, format(as.Date(s), "%Y_%m_%d"))
nc <- nc_open(sprintf("%s/%s/%s/%s_%s.nc", path, var, format(as.Date(s), "%Y"), var, format(as.Date(s), "%Y_%m_%d")),readunlim=F)
X <- ncvar_get(nc, "X")
Y <- ncvar_get(nc, "Y")
nc_close(nc)
xx <- matrix(rep(X, length(Y)), nrow = length(Y))
yy <- matrix(rep(Y, length(X)), ncol = length(X))
nx <- vector(length = np)
ny <- vector(length = np)
for (ip in seq(np)) {
dis <- (xx-x[ip])^2 + (yy-y[ip])^2
nearest <- which.min(dis)
nx[ip] <- which(X == xx[nearest])
ny[ip] <- which(Y == yy[nearest])
}
nx
ny
dim(dis)
sort(dis)
head(order(dis))
nearest
dis[nearest]
x[ip]
y[ip]
xx-x[ip]
head(sort(xx-x[ip]))
head(sort(abs(xx-x[ip])))
head(sort(abs(yy-y[ip])))
min(dis)
dis <- (xx-x[ip])^2 + (yy-y[ip])^2
min(dis)
head(order(abs(yy-y[ip])))
head(order(abs(xx-x[ip])))
dim(dis)
x0 <- which(abs(xx-x[ip])==0)
y0 <- which(abs(yy-y[ip])==0)
intersect(x0, y0)
unique(xx)
length(unique(xx))
length(unique(yy))
xx[1,]
xx[,1]
xx <- matrix(rep(X, length(Y)), nrow = length(Y), byrow = TRUE)
xx[,1]
yy <- matrix(rep(Y, length(X)), ncol = length(X), byrow = FALSE)
yy[1,]
yy[2,]
yy[3,]
nx <- vector(length = np)
ny <- vector(length = np)
for (ip in seq(np)) {
dis <- (xx-x[ip])^2 + (yy-y[ip])^2
nearest <- which.min(dis)
nx[ip] <- which(X == xx[nearest])
ny[ip] <- which(Y == yy[nearest])
}
nx
ny
#' get SeNorge time series for a point (x, y)
#'
#' @param x x direction coordinate lon, utm_e
#' @param y y direction coordinate lat, utm_n
#' @param s start date
#' @param e end date
#' @param var variable to extract: tm or rr
#' @param path path to data
#'
#' @keywords data
#' @export
#' @examples
#' seNorgeDailyTimeSeriesDay()
seNorgeDailyTimeSeriesDay <- function(x, y, s = s, e = e, var = "tm", path = "//hdata/grid/metdata/met_obs_v2.0") {
if (! require("ncdf4")) {install.packages("ncdf4"); library(ncdf4)}
if (! require("lubridate")) {install.packages("lubridate"); library(lubridate)}
if (length(x) != length(y)) stop("x and y are not at the same length")
reMatrx <- NULL
if (var == "tm") VarN <- c("TEMP1d", "mean_temperature")
if (var == "rr") VarN <- c("PREC1d", "precipitation_amount")
s <- as.Date(s)
e <- as.Date(e)
np <- length(x)
nc <- nc_open(sprintf("%s/%s/%s/%s_%s.nc", path, var, format(as.Date(s), "%Y"), var, format(as.Date(s), "%Y_%m_%d")),readunlim=F)
X <- ncvar_get(nc, "X")
Y <- ncvar_get(nc, "Y")
nc_close(nc)
xx <- matrix(rep(X, length(Y)), nrow = length(Y), byrow = TRUE)
yy <- matrix(rep(Y, length(X)), ncol = length(X), byrow = FALSE)
nx <- vector(length = np)
ny <- vector(length = np)
for (ip in seq(np)) {
dis <- (xx-x[ip])^2 + (yy-y[ip])^2
nearest <- which.min(dis)
nx[ip] <- which(X == xx[nearest])
ny[ip] <- which(Y == yy[nearest])
}
minX <- min(nx)
minY <- min(ny)
maxX <- max(nx)
maxY <- max(ny)
nx <- nx - minX + 1
ny <- ny - minY + 1
for (iY in seq(s, e, by = "day")) {
nc <- nc_open(sprintf("%s/%s/%s/%s_%s.nc", path, var, format(as.Date(iY, origin='1970-01-01'), "%Y"), var, format(as.Date(iY, origin='1970-01-01'), "%Y_%m_%d")),readunlim=F)
ndays <- length(ncvar_get(nc, "time"))
seNorgeData <- ncvar_get(nc, VarN[2], start=c(minX,minY,1), count=c(maxX-minX+1,maxY-minY+1,ndays))
#get <- seNorgeData[nx, ny, ]
get <- seNorgeData
reMatrx <- c(reMatrx, get)
}
return(reMatrx)
}
testd <- seNorgeDailyTimeSeriesDay(x, y, "1957-01-01", "1957-01-01",
var = "tm", path = "//hdata/grid/metdata/met_obs_v2.0")
testd
library(rNVE)
?writeHBV_disc
library(rNVE)
library(rNVE)
library(installr)
library(installr)
updateR()
library(rNVE)
library(rNVE)
library(devtools)
install.packages("honglioslo/rNVE")
library(rNVE)
devtools::load_all(".")
install.packages("honglioslo/rNVE")
library(devtools)
install.packages("honglioslo/rNVE")
remove.packages("rNVE")
library(devtools)
install.packages("honglioslo/rNVE")
install_github("honglioslo/rNVE")
getwd()
setwd("R:/personlig/holi")
install_github("honglioslo/rNVE")
library(rNVE)
library(rNVE)
devtools::load_all("A:/holi/GitHub/rNVE")
devtools::load_all("A:/holi/GitHub/rNVE")
install.packages("Z:/GitHub/rNVE_0.0.0.9000.tar.gz", repos = NULL, type="source")
library(rNVE)
devtools::load_all("A:/holi/GitHub/rNVE")
library(rNVE)
install.packages("Z:/GitHub/rNVE_0.0.0.9000.tar.gz", repos = NULL, type="source")
library(rNVE)
?nearestXY
?random_pst
??rNVE
?nearestXY
